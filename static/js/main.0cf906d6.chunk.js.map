{"version":3,"sources":["helpers/getEmoji.js","helpers/getRGB.js","components/Joke.js","components/JokeList.js","App.js","serviceWorker.js","index.js"],"names":["getEmoji","rating","getRGB","Joke","props","state","this","upvote","downvote","jokeText","votes","className","onClick","style","border","Component","JokeList","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","joke","text","fetchNewJokes","bind","length","getjokes","numJokesToGet","axios","get","headers","Accept","res","has","data","push","id","uuid","console","log","setState","prevState","setItem","stringify","alert","delta","sort","a","b","src","alt","j","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0cf906d6.chunk.js","sourcesContent":["// Helper function to create emoji classnames\r\n//\r\n//  - Depending on the rating of the joke we will dictate what kind of emoji best\r\n//    represents the quality of the joke\r\n\r\nfunction getEmoji(rating) {\r\n    if (rating >= 15) {\r\n        return \"em em-rolling_on_the_floor_laughing\";\r\n    }\r\n    else if(rating >= 12)    {\r\n        return \"em em-laughing\";\r\n    }\r\n    else if(rating >= 9)    {\r\n        return \"em em-smiley\";\r\n    }\r\n    else if(rating >= 6)    {\r\n        return \"em em-slightly_smiling_face\";\r\n    }\r\n    else if(rating >= 3)    {\r\n        return \"em em-neutral_face\";\r\n    }\r\n    else if(rating >= 0)    {\r\n        return \"em em-confused\";\r\n    }\r\n    else{\r\n        return \"em em-angry\";\r\n    }\r\n}\r\n\r\nexport default getEmoji;\r\n","// Helper function to create rgb values based of the rating for the current vote\r\n//\r\n//  - We want to dynamically create colors that are representative of the rating\r\n//       i.e. bright green for high upvoted jokes and red for bad jokes to help\r\n//       visualize the quality of a joke\r\n//  - It uses rgb(200,200,0) and subtracts from the red hue if the votes\r\n//    are positive, or subtracts from the green hue if the votes are negative\r\n\r\nfunction getRGB(rating) {\r\n\tif (rating > 0) {\r\n\t\treturn `${200 - rating * 20}, 200,0`;\r\n\t} else {\r\n\t\treturn `200,${200 - rating * -20},0`;\r\n\t}\r\n}\r\n\r\nexport default getRGB;\r\n","import React, { Component } from \"react\";\r\nimport \"./Joke.css\";\r\nimport getEmoji from \"../helpers/getEmoji\";\r\nimport getRGB from \"../helpers/getRGB\";\r\n\r\nclass Joke extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet { upvote, downvote, jokeText, votes } = this.props;\r\n\t\treturn (\r\n\t\t\t<div className=\"Joke\">\r\n\t\t\t\t<div className=\"Joke-vote-btns\">\r\n\t\t\t\t\t<i onClick={upvote} className=\"fas fa-arrow-up\"></i>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tstyle={{ border: `3px solid rgb(${getRGB(votes)})` }}\r\n\t\t\t\t\t\tclassName=\"Joke-rating\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{votes}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<i onClick={downvote} className=\"fas fa-arrow-down\"></i>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"Joke-text\">{jokeText}</div>\r\n\t\t\t\t<div className=\"Joke-emoji\">\r\n\t\t\t\t\t<i className={getEmoji(votes)}></i>\r\n\t\t\t\t</div>\r\n                \r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Joke;\r\n","import React, { Component } from \"react\";\r\nimport Joke from \"./Joke\";\r\nimport \"./JokeList.css\";\r\nimport axios from \"axios\";\r\nimport uuid from \"uuid/dist/v4\";\r\n\r\nclass JokeList extends Component {\r\n\tstatic defaultProps = {\r\n\t\tnumJokesToGet: 10,\r\n\t};\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tjokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n\t\t\tloading: false,\r\n\t\t};\r\n\t\t//Variable to hold the seen jokes so we dont get duplicates\r\n\t\tthis.seenJokes = new Set(this.state.jokes.map((joke) => joke.text));\r\n\t\tthis.fetchNewJokes = this.fetchNewJokes.bind(this);\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\t//If there are jokes in local storage load new ones and save them in local storage\r\n\t\tif (this.state.jokes.length === 0) {\r\n\t\t\tthis.getjokes();\r\n\t\t}\r\n\t}\r\n\tasync getjokes() {\r\n\t\ttry {\r\n\t\t\t// Load jokes from API and set the state to hold them\r\n\t\t\tlet jokes = [];\r\n\t\t\twhile (jokes.length < this.props.numJokesToGet) {\r\n\t\t\t\tlet url = \"https://icanhazdadjoke.com/\";\r\n\t\t\t\tlet res = await axios.get(url, {\r\n\t\t\t\t\theaders: { Accept: \"application/json\" },\r\n\t\t\t\t});\r\n\t\t\t\tif (this.seenJokes.has(res.data.joke)) {\r\n\t\t\t\t\tjokes.push({ id: uuid(), jokeText: res.data.joke, votes: 0 });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"Found a duplicate\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//Set the state with the old jokes and the new jokes loaded in\r\n\t\t\tthis.setState(\r\n\t\t\t\t(prevState) => {\r\n\t\t\t\t\treturn { loading: false, jokes: [...prevState.jokes, ...jokes] };\r\n\t\t\t\t}, //Save the new jokes loaded in to local storage\r\n\t\t\t\t() =>\r\n\t\t\t\t\twindow.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\talert(error);\r\n            this.setState({loading : false})\r\n        }\r\n\t}\r\n\r\n\t// Fetches 10 new jokes from the API\r\n\tfetchNewJokes() {\r\n\t\t//Set the state so loading is true for the loading icon and then immediately call getJokes function\r\n\t\tthis.setState({ loading: true }, this.getjokes);\r\n\t}\r\n\r\n\t// Function to handle whether a vote is upvoted or downvoted\r\n\t//  - Map over the joke and find the joke ID passed in\r\n\t//      - Make a new object with the votes and update the votes value\r\n\t//  - Else just add the joked unchanged\r\n\thandleVote(id, delta) {\r\n\t\tthis.setState(\r\n\t\t\t(prevState) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tjokes: prevState.jokes.map((joke) =>\r\n\t\t\t\t\t\tjoke.id === id ? { ...joke, votes: joke.votes + delta } : joke\r\n\t\t\t\t\t),\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\t//Save the votes/rating for each of the jokes to the local storage\r\n\t\t\t() =>\r\n\t\t\t\twindow.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n        // If state.loading true show loading spinner\r\n\t\tif (this.state.loading) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"JokeList-spinner\">\r\n\t\t\t\t\t<i className=\"far fa-8x fa-laugh fa-spin\"></i>\r\n\t\t\t\t\t<h1 className=\"JokeList-title\">Loading...</h1>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n        }\r\n        let jokes = this.state.jokes.sort((a,b) => b.votes - a.votes)\r\n        // Then return the jokes container\r\n\t\treturn (\r\n\t\t\t<div className=\"JokeList\">\r\n\t\t\t\t<div className=\"JokeList-sidebar\">\r\n\t\t\t\t\t<h1 className=\"JokeList-title\">\r\n\t\t\t\t\t\t<span>Dad</span>Jokes\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\r\n\t\t\t\t\t\talt=\"emoji\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button onClick={this.fetchNewJokes} className=\"JokeList-btn\">\r\n\t\t\t\t\t\tGet New Jokes\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"JokeList-jokes\">\r\n\t\t\t\t\t{jokes.map((j) => (\r\n\t\t\t\t\t\t<Joke\r\n\t\t\t\t\t\t\tkey={j.id}\r\n\t\t\t\t\t\t\tvotes={j.votes}\r\n\t\t\t\t\t\t\tjokeText={j.jokeText}\r\n\t\t\t\t\t\t\tupvote={() => this.handleVote(j.id, 1)}\r\n\t\t\t\t\t\t\tdownvote={() => this.handleVote(j.id, -1)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default JokeList;\r\n","import React from 'react';\nimport './App.css';\nimport JokeList from './components/JokeList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}